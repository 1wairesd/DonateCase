import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.1'
    }
}
plugins {
    id 'java'
    id 'com.rikonardo.papermake' version '1.0.6'
}

group = 'com.jodexindustries.donatecase'
version = '2.1.6.2'

repositories {
    mavenCentral()
    maven {
        name = "placeholderapi"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi"
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven {
        name = 'authlib'
        url = 'https://papermc.io/repo/repository/maven-releases/'
    }
    maven {
        name = "jodexindustries"
        url = "https://repo.jodexindustries.space/releases"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    implementation "com.github.MilkBowl:VaultAPI:1.7"
    implementation "me.clip:placeholderapi:2.11.2"
    implementation "com.arcaniax:HeadDatabase-API:1.3.1"
    implementation "de.likewhat.customheads:CustomHeads:3.0.7"
    implementation 'com.github.LoneDev6:API-ItemsAdder:3.6.1'
    implementation 'com.mojang:authlib:1.5.25'

}

def dependsDir = "${buildDir}/libs/dependencies/"

configurations.implementation.setCanBeResolved(true)

tasks.register('copyDepends', Copy) {
    from configurations.implementation
    into "${dependsDir}"
}

tasks.register('proguard', ProGuardTask) {
    configuration file('proguard.conf')
    injars sourceSets.main.output
    libraryjars files("D:/Java/Java11/jmods/")
    libraryjars files(dependsDir)
    verbose
    outjars "${buildDir}/libs/${project.name}-${version}-obf.jar"

}

build.dependsOn proguard

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}